/**
 * php.js
 *
 * manifest (webdeploy plugin)
 */

const url = require("url");
const path = require("path");
const { format } = require("util");
const { ManifestBase } = require("./manifest");
const { PluginError } = require("./error");

const HEADER =
`<?php

/*
 * Auto-generated manifest
 *
 * This manifest was generated by an automated process and shouldn't be edited
 * manually.
 */

`;

function php_value(val) {
    if (typeof val === "string") {
        return "'" + escape_single(val) + "'";
    }

    if (typeof val === "number") {
        return val.toString();
    }

    if (typeof val === "boolean") {
        if (val) {
            return "true";
        }

        return "false";
    }

    if (Array.isArray(val)) {
        return "array(" + val.map(php_value).join(", ")  + ")";
    }

    return "null";
}

function isURL(ref) {
    try {
        const result = new url.URL(ref);
    } catch (ex) {
        return false;
    }

    return true;
}

function escape_single(s) {
    return s.replace(/\'/g,"\\'");
}

function create_prefix_refs(refs) {
    const result = new Map();

    let n = 0;
    for (let i = 0;i < refs.length;++i) {
        const ref = refs[i];
        if (isURL(ref)) {
            result.set(n++,ref);
            continue;
        }

        const parts = ref.split(path.sep).filter((x) => !!x);
        const last = parts.pop();

        let bucket = result;
        for (let j = 0;j < parts.length;++j) {
            const part = parts[j];
            let next = bucket.get(part);
            if (next) {
                bucket = next;
            }
            else {
                next = new Map();
                bucket.set(part,next);
                bucket = next;
            }
        }

        const match = last.match(/^([^\.]+)/);
        if (match) {
            bucket.set(match[1],ref);
        }
    }

    return result;
}

class PHPManifest extends ManifestBase {
    async generate(context) {
        const manifest = this.createManifest();

        let code = HEADER + "return array(\n";

        if (this.options.extra) {
            Object.keys(this.options.extra).forEach((k) => {
                code += format("  '%s' => ",k) + php_value(this.options.extra[k]) + ",\n";
            });
        }

        if (Array.isArray(manifest)) {
            if (this.options.prefixed) {
                code += this.createInnerPrefixed(manifest,2);
            }
            else {
                code += this.createInnerSimple(manifest,2);
            }
        }
        else {
            code += this.createInnerGrouped(manifest,2);
        }

        code += ");\n";

        return code;
    }

    createInnerSimple(refs,indent) {
        let code = "";

        for (let i = 0;i < refs.length;++i) {
            const ref = refs[i];

            code += " ".repeat(indent);
            code += format("'%s',\n",escape_single(ref));
        }

        return code;
    }

    createInnerPrefixed(_refs,indent) {
        let refs;
        let code = "";

        if (_refs instanceof Map) {
            refs = _refs;
        }
        else {
            refs = create_prefix_refs(_refs);
        }

        const it = refs.keys();
        while (true) {
            let next = it.next();
            if (next.done) {
                break;
            }

            code += " ".repeat(indent);
            code += format("'%s' => ",escape_single(next.value));

            const entry = refs.get(next.value);
            if (entry instanceof Map) {
                code += "array(\n";
                code += this.createInnerPrefixed(entry,indent+2);
                code += " ".repeat(indent) + "),\n";
            }
            else {
                code += format("'%s',\n",escape_single(entry));
            }
        }

        return code;
    }

    createInnerGrouped(groups,indent) {
        let code = "";

        Object.keys(groups).forEach((key) => {
            code += " ".repeat(indent);
            code += format("'%s' => array(\n",escape_single(key));

            if (this.options.prefixed) {
                code += this.createInnerPrefixed(groups[key],indent+2);
            }
            else {
                code += this.createInnerSimple(groups[key],indent+2);
            }

            code += " ".repeat(indent) + "),\n";
        });

        return code;
    }
}

module.exports = {
    PHPManifest
};
